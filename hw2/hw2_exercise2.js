// -----------------------------------------------------------------------------------------
	// Задание 2
// -----------------------------------------------------------------------------------------

// 2. Обгрунтуйте будь-ласка результат виконання вищезгаданого коду.

/*

Ответ:

	В данном коде у нас объявлена глобальная переменная с именем "foo", с таким же именем
объявлена локальная переменная внутри функции (с именем "bar"). Очевидно что мы имеем дело с областью 
видимости функции "scope". В ситуации, если локальная переменная объявленная внутри функции, имеет
такой же индификатор как и у глобальной переменной то она (локальная переменная) имеет больший приоритет.

	У объявлений переменных внутри функций в языке программирования JavaScript есть одна интересная
особенность, которую называют "подъем" или "hoisting". Javascript интерпретатор зараннее знает о
объявлении всех переменных внутри функции, все эти объявления интерпретатор поднимает в самый вверх
(начало) функции (судя из этого становится логичным название "подъем"). Так как переменная "foo" внутри
функции объявлена и поднята интерпритатором (но не инициализированна) и она имеет больше приоритет чем глобальная
переменная, то становится очевидным что условная инструкция if => возьмет значение именно из нее (которое
равняется => undefined (так как переменная объявлена, но не инициализированная)). Мы знаем, что условная
инструкция, переданное ей выражение приводит к логическому (boolean) типу. В нашем случае переданное выражение
равняется undefined, что при приведении к логическому типу даст => false. Так как выражение передано с
унарным оператором отрицания "!" что нам даст инвертированное значение и мы получим true. Выходя из этого
код внутри фигурных кавычек условной инструкции сработает и инициализирует переменную "foo" и задаст ей 
значение => 10, которое успешно передается в метод console.log который выведет результат в консоль;

*/

// Для наглядности продемонстрирую аналогичный код, коду из задания 1:
var foo = 1;

function bar() {
	var foo;

	if (!foo) {
		foo = 10;
	}
	
	console.log(foo);
}

bar(); // Результатом выполнения данного кода будет => 10