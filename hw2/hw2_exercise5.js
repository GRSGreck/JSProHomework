// -----------------------------------------------------------------------------------------
	// Задание 5
// -----------------------------------------------------------------------------------------

// 5. Наведіть приклади з використанням унарних, бінарних, тернарних операторів (якомога більше різних операторів)

// *****Унарные операторы +, -, typeof, ++, --

	// 1. Унарный оператор "+" переобразовывает строку в число если это возможно

	var myStr = "123";
	myStr = +myStr;

	console.log(myStr); // Результатом выполнения данного кода будет => число 123

	// 2. Унарный оператор "-" меняет знак числа на противопложний

	var z = 1;
	z = -z;

	console.log(z); // Результатом выполнения данного кода будет => -1

	// 3. Унарный оператор "typeof" возвращает строку, содержащую информацию о типе операнда

	console.log(typeof myStr); // Результатом выполнения данного кода будет => number

// *****Бинарные операторы
/* P.S. бинарных операторов слишком много поэтому примеры буду показывать выборочно из каждого вида по несколько штук
*/
	// Арифметические операторы: +, -, *, /, %

		// 1. Бинарный оператор "%" возврящает остаток от деления

		var x = 18;

		console.log(18 % 5);

		// 2. Бинарный оператор "+" складывает два числа или производит конкатанацию строк (даже если хотя бы один аргумент является строкой, то второй будет также преобразован к строке!)

		// Сложение двух чисел
			var v = 5 + 10;

			console.log(v);

		// Конкатанация 2-х строк
		var sStr = 'Hello';
		var sNum = '25';

		console.log(sStr + ' Roman!');
		console.log(sNum + 25);

	// Запятая ',' запятая позволяет перечислять выражения, разделяя их запятой ','. Каждое из них — вычисляется и отбрасывается, за исключением последнего, которое возвращается.
		
		// Этот оператор можно вызвать явным образом:
		var a = (3, 12);

		console.log(a);  // Результатом выполнения данного кода будет => 12

		// Обычно он используется в составе более сложных конструкций, чтобы сделать несколько действий в одной строке

		var i;
		var j;
		var y;	

		for(i = 1, j = 3, y = i * j; i < 10; i++){
			console.log(i);
		}

	// Логические операторы: &&, ||, !. Логические операторы зачастую используются в условных инструкциях и условных операторах

		// 1. Бинарный оператор '&&' возвращает true, если оба операнда возвращают true

		var d = 10;
		var r = 5;

		if (r && (d /2)) {
			console.log(true); // Результатом выполнения данного кода будет => true
		}

		// Еще один способ использования оператора "&&"

		var o;
		var someBool = true;
		var otherBool = someBool && (o = 'Cool');

		console.log(otherBool);


		// 2. Бинарный оператор '||' возвращает true, если хотя бы одни из операндов возвращают true

		if (true || false) {
			console.log(true); // Результатом выполнения данного кода будет => true
		}

		// Еще один способ использования оператора "||"

		var someString = 'Roman';
		var otherString = someString || 'Default value'; // Результатом выполнения данного кода будет => строка 'Roman', если переменной someString присвоить пустую строку, то результатом будет  => строка 'Default value'

		console.log(otherString);

		// 3. Бинарный оператор '!' логическое отрицание инвертирует полученное значение

		if (!false) {
			console.log(true); // Результатом выполнения данного кода будет => true
		}

	// Операторы присвоения: =, +=, -=, *=. \=, >>=, <<=, >>>=, &=, |=, ^=

		// 1. Бинарный оператор '=' присваивает значение переменной

		var b;
		b = 25;

		console.log(b); // Результатом выполнения данного кода будет => число 25

		// 2. Бинарный оператор '+=' к первоначальному значению переменной добавляет заданное (если вторым операндом будет строка то произойдет конкатанация этой строки с числов тип которого интерпретатор приведет тоже к строке)

		b += 50;

		console.log(b); // Результатом выполнения данного кода будет => число 75

		b += '80';

		console.log(b); // Результатом выполнения данного кода будет => строка 7580

		// 2. Бинарный оператор '*=' к первоначальное значению переменной умножает заданное (если вторым операндом будет строка то интерпретатор попытается привести оба операнда к числовому типу данных)

		b *= 2;

		console.log(b); // Результатом выполнения данного кода будет => число 15160 ('7580' * 2 = 15160)

		b *= 'Hello';

		console.log(b); // Результатом выполнения данного кода будет => число 15160 (15160 * 'Hello' = NaN)


	// Операторы сравнения: ==, !=, ===, !==, >, >=, <, <=. Операторы сравнения зачастую используются в условных инструкциях и условных операторах

		// 1. Бинарный оператор '==' сравнивает 2 операнда между собой с приведением их к одному типу

		if (5 == '5') {
			console.log(true); // Результатом выполнения данного кода будет => true
		}

		// 2. Бинарный оператор '===' сравнивает 2 операнда между собой без приведением их к одному типу

		console.log(5 === '5'); // Результатом выполнения данного кода будет => false

	// Бинарный оператор "in" определяет принадлежит ли свойство объекту, возвращая true/false (работает также с наследуемыми свойствами)

	var myObj = {
		name: 'Roman',
		age: 26
	};

	console.log('age' in myObj);
	console.log('name' in myObj);
	console.log('gender' in myObj);
	console.log('toString' in myObj);

// Бинарный оператор "in" второе применение в цикле for

	var key;

	for(key in myObj){
		console.log(key + ' : ' + myObj[key]);
	}

// И еще один пример более интересный для использования как унарных так и бинарных операторов

var options = {
	initVal : 0,
	finalVal : 100,
	myArray : [],
	sum : 0
};

for(var i = options.initVal; i <= options.finalVal; i++){

	if(i % 3 === 0)	options.myArray.push(i);
	else if(i % 5 === 0) options.myArray.push(i);
	
}

for(var j = 0; j < options.myArray.length; j++){
	options.sum += options.myArray[j];
}

console.log("Сумма всех чисел в диапазоне от " + options.initVal + " до " + options.finalVal + " которые делятся на 3 и на 5 равна: " + options.sum);  // Результатом выполнения данного кода будет => строка 'Сумма всех чисел в диапазоне от 0 до 100 которые делятся на 3 и на 5 равна: 2418'

// *****Тернарный оператор у нас один: condition ? ifTrue : ifFalse;

var s = true;
var myTernar = s ? 'Cool' : 'Hmmm....';

console.log(myTernar); // Результатом выполнения данного кода будет => строка 'cool'