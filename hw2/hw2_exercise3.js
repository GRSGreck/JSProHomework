// -----------------------------------------------------------------------------------------
	// Задание 3
// -----------------------------------------------------------------------------------------

// 3. Обгрунтуйте будь-ласка результат виконання коду.

var a = 1;

function b() {
	a = 10;
	return;

	function a(){}
}

b();
console.log(a); // Результатом выполнения данного кода будет => 1

/*

Ответ:

Внутри функции "b", выражение a = 10, переопределяет значение глобальной переменной "a", так как перед данным
выражением нет ключевого слова "var". Далее мы видим объявление функции с помощью инструкции объявления 
функции с таким же именем, как и глобальная переменная, которую мы переопределяем внутри функции.Очевидно, что 
мы имеем дело с областью видимости функции "scope" и такое выражение как "a = 10" теперь говорит о том, что, 
функции под именем "а" присваивается значение 10. Так как функции таким образом мы не можем присвоить 
значение, интерпретатор преобразовывает функцию в переменную с таким же именем. Теперь переопределение 
переменной с именем "a" переопределит не глобальную переменную, а инициализирует локальную переменную 
автоматически объявленную интерпретатором внутри функции (почему так происходит смотрите ответ к заданию 2, а 
именно там, где говорится о такой особенности как "подъем" или "hoisting"). Если бы не была объявлена функция 
"a" внутри функции "b", то переопределялось бы значение глобальной переменной "a" и console.log(a) вывел бы в 
консоль => 10. Что касается оператора return, то он ничего не возвращает и если вызвать метод console.log(b()) 
он нам вернет undefined (то есть пустоту).


Наглядно это можно показать так:
function b() {
	var a;
	a = 10; // функция "а" преобразовывается в переменную с таким же именем и объявление этой функции (без 
	инициализации) уходит в самое начало функции "b", после чего эта переменная инициализируется получая 
	значение 10.
	return; // возвращает undefined
	
	function a(){}
}

*/